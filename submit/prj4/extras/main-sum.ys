# Execution begins at address 0 
       .pos    0
       
init:  irmovq stack, %rsp # set up stack pointer  
       call    main       # execute main program
       halt               # terminate program 

# This program assumes main invoked as
# main(int argc, int argv[]) and sets eax to 
# sum of array elements a[0] ... a[n - 1].
# The array elements are provided as parameters
# to the y86-sim program and loaded into high
# memory before the program is started.
# If a sequence of integers from 1...10
# (using shell construct $(seq 1 10))
# is used, rax should be set to 55.

# rdi = argv; rsi = argc
main:
        rrmovq %rdi, %rax   # tmp = argv
        rrmovq  %rsi, %rdi  # start = argv
	rrmovq  %rax, %rsi  # count = argc
        call   sum          # sum(start=argv, count=argc)
        ret

        # int sum(int *start, int count)
        # rdi = start; rsi = count
sum:
        irmovq $8, %r8     # const 8
        irmovq $1, %r9     # const 1
        xorq   %rax, %rax  # sum = 0
        andq   %rsi,%rsi   # == 0?
        jmp    test        # goto test
loop:
        mrmovq (%rdi),%r10 # get *Start
        addq   %r10, %rax  # add to sum
        addq   %r8, %rdi   # start++
        subq   %r9, %rsi   # count--
test:
        jne    loop        # stop when 0
        ret

#stack starts here and grows to lower addresses  
        .pos   0x200
stack:
